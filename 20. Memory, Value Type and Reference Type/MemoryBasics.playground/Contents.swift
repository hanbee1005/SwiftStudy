import UIKit

/*
 # Memory Basics
 - 메모리를 가장 단순하게 이야기하면 0과 1을 저장할 수 있는 반도체입니다. 메모리는 전압 차이를 이용해서 데이터를 저장합니다. 전기가 들어오면 1이 저장되고 전기가 들어오지 않으면 0이 저장됩니다.
 - 0이나 1이 들어가는 가장 작은 공간을 Bit 라고 합니다. 여기에 들어가는 모든 데이터는 종류에 상관 없이 2진수로 변환되어 저장됩니다. Bit 는 컴퓨터 공학에서 정보의 기본 단위로 사용되고 있습니다. 프로그래밍에서는 8개의 Bit 가 모인 Byte 를 기본 단위로 사용합니다.
 - 1byte 에는 256개의 Binary 패턴이 있습니다. 양수만 저장한다고 생각하면 저장할 수 있는 값의 범위는 0부터 255 사이입니다. 양수와 음수를 모두 저장하는 경우에는 -128에서 127까지의 수를 저장할 수 있습니다.
 - 나열된 Bit 중 가장 왼쪽에 있는 비트를 최상위 비트(Most Significant Bit)라고 하고 가장 오른쪽에 있는 비트를 최하위 비트(Least Significant Bit)라고 합니다. 실제 데이터를 저장하는 비트는 Data Bit 라고 합니다. 양수만 저장할 때는 모든 비트를 Data Bit 로 사용하고 양수와 음수를 저장하는 경우에는 최상위 비트를 부호를 구분하는 비트로 사용하고 나머지 7개의 비트만을 Data Bit 로 사용합니다. 최상위 비트의 값이 0이면 양수(Positive Numbers)로 인식하고 1이면 음수(Negative Numbers)로 인식합니다. 이런 역할을 하는 비트를 부호 비트(sign Bit)라고 합니다.
 - 초기의 컴퓨터는 음수를 저장하기 위해서 단순히 부호 비트를 1로 바꾸고 나머지 비트는 양수와 동일한 비트를 사용하였습니다. 하지만 이 방식은 여러가지 문제로 인해 더이상 사용하지 않습니다. 현재는 2의 보수 방식을 사용하고 있습니다. 2의 보수 방식은 원래의 비트 값에 Bitwise Not 연산을 수행한 뒤 1을 더하는 것입니다. Bitwise Not 연산은 Bit 가 1인 경우 0으로 바꾸고 0인 경우 1로 바꾸는 비트 연산입니다.
 - 메모리에는 1byte 를 저장할 수 있는 공간마다 고유한 주소가 있습니다. CPU 는 이 주소를 사용하여 메모리에 접근합니다. CPU 는 메모리 주소를 저장하고 특정 위치에 접근하기 위해서 Memory Address Register 를 사용합니다. CPU 는 보통 32bit 와 64bit 로 구분합니다. 주소 레지스터의 크기는 CPU 의 비트 수와 같습니다. 32bit CPU 는 주소 레지스터를 통해 약 42억개의 메모리주소에 접근할 수 있습니다. 이것을 기가 바이트 단위로 환산하면 4GB 입니다. 32bit CPU 를 사용하는 컴퓨터에서 최대 메모리 용량이 4GB 로 제한되는 것은 바로 이런 이유 때문입니다. 64bit CPU 의 경우 약 1800경개가 넘는 메모리 주소에 접근할 수 있습니다. 사용 가능한 메모리 공간도 이론적으로는 16EB 로 제한됩니다. 하지만 실제로는 메모리 운영 방식에 따라서 더 작은 크기로 제한됩니다.
 - 운영체제는 프로그램을 실행할 떄마다 프로그램이 사용할 메모리 공간을 할당합니다. 이 공간은 사용 용도에 따라서 크게 4가지로 구분됩니다.
 - code 영역에는 기계어로 번역된 프로그램 코드가 저장됩니다.
 - Data 영역에는 정적 변수와 전역 변수가 저장됩니다. 여기에 저장된 데이터는 프로그램이 시작될 때 생성되었다가 프로그램이 제거되면 함께 제거됩니다.
 - stack 에는 지역변수, 파라미터, 리턴값이 저장됩니다. stack 은 함수 호출과 밀접한 관련이 있습니다. 함수를 호출하면 함수에서 사용하는 모든 값을 저장하는 메모리 공간이 자동으로 생성됩니다. 이 공간을 stack frame 이라고 부릅니다. stack frame 은 함수의 실행이 종료되면 stack 에서 자동으로 제거되고 다른 함수에서 메모리를 다시 사용할 수 있게 됩니다. stack 은 stack frame 을 쌓아가는 방식으로 메모리를 관리합니다. 함수가 실행될 때마다 새로운 stack frame 이 생성됩니다. 반대로 함수의 실행이 종료되면 가장 최근에 추가된 stack frame 부터 순서대로 제거됩니다.
 - Heap 에는 동적으로 할당된 데이터가 저장됩니다. 다른 영역은 할당할 공간의 크기를 예측할 수 있지만 Heap 은 동적으로 할당되는 특성때문에 공간의 크기를 예측하기 어렵습니다. Heap 에 저장된 데이터는 생성 시점과 제거 시점이 정해져있지 않습니다. 그래서 자동으로 생성되거나 제거되지 않고 직접 코드를 통해 생성하고 제거해야 합니다. 더 이상 필요하지 않은 데이터를 제거하지 않고 그대로 둔다면 프로그램이 종료될 때까지 유지되고 이런 메모리가 많아진다면 결국 메모리가 부족해집니다. 더 이상 필요하지 않은 메모리가 정상적으로 해제되지 않는 것을 메모리 누수(Memory Leaks)라고 합니다.
 - 값 형식(Value Type)은 stack 에 저장됩니다. 더 이상 사용하지 않는 경우 자동으로 제거되기 때문에 메모리 관리가 상대적으로 쉽습니다. 반면 참조 형식의 경우 실제 값을 Heap 에 저장하고 Heap 메모리 주소를 stack 에 저장합니다. 실제 값에 접근할 때는 항상 stack 에 있는 주소를 통해 접근합니다. 값을 더 이상 사용하지 않는다면 두 공간에 저장되어 있는 데이터를 완전히 삭제해서 메모리 누수를 방지하는 것이 중요합니다.
 */
